"use strict";

const core = require("./core");
const loader = core.getLoader();
const $ = loader.store;

const gulp = require("gulp");
const merge = require("merge-stream");

loader.depend({
	path: "path",

	gulpTypescript: "gulp-typescript",
	sourcemaps: "gulp-sourcemaps",
	gutil: "gulp-util",
	concat: "gulp-concat",
	insert: "gulp-insert"
});

core.buildTasks.push("build:server");

const buildTransform = transform => {
	$.gutil.log($.gutil.colors.green(core.getName(transform) + ": building..."));

	let buildPath = core.out;

	let dest = $.path.join(buildPath, transform.dest);
	let sourcedir = $.path.parse(transform.source).dir;

	let entries = [transform.source];

	if (transform.extraEntries) {
		entries.push(...transform.extraEntries);
	}

	let config = {
		declaration: false
	};

	if (transform.typingsDest) {
		config.declaration = true;
	}

	if (transform.config && transform.config.typescript) {
		Object.assign(config, transform.config.typescript);
	}

	const handler = core.getErrorHandler(core.getName(transform));

	let stream = gulp.src(entries)
		.pipe($.sourcemaps.init())
		.on("error", handler)
		.pipe($.gulpTypescript(config));

	let js = stream.js
		.pipe($.sourcemaps.write("./"))
		.pipe(gulp.dest(dest));

	let dts = stream.dts
		.pipe($.insert.transform((contents, file) => {
			const normalSource = $.path.normalize(sourcedir.replace(/\*/g, "")).replace(/\\/g, "\\\\");

			const matches = file.path.match(new RegExp(`^.+?${ normalSource }[/\\\\]?(.+)`));

			if (!matches) {
				return contents;
			}

			const modulePath = matches[1].replace(/\.d\.ts$/, "");

			contents = contents.replace(/from "(.+?)"/g, (whole, path) => {
				return `from "${ $.path.normalize($.path.join("guh", path)).replace(/\\/g, "/") }"`;
			});
			contents = contents.replace(/\n/g, "\n\t").trim();

			return `declare module "${ $.path.join("guh", modulePath).replace(/\\/g, "/") }" {\n\t${ contents }\n}`;
		}))
		.pipe($.concat("index.d.ts"))
		.pipe(gulp.dest(dest));

	stream = merge([js, dts])
		.pipe(core.getNotify(core.getName(transform) + ": done!"));

	return stream;
};

gulp.task("build:server", () => {
	const transforms = core.getTransforms("server");
	let merged = merge();

	if (transforms.length > 0) {
		loader.load();
	}

	for (let transform of transforms) {
		merged.add(buildTransform(transform));

		if (core.watch) {
			gulp.watch(transform.source, e => {
				buildTransform(transform);
			});
		}
	}

	return merged;
});