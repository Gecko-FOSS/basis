"use strict";

const core = require("./core");
const load = core.load;

const path = load("path");
const gulp = load("gulp");

const merge = load("merge-stream");

const gulpTypescript = load("gulp-typescript");
const sourcemaps = load("gulp-sourcemaps");
const notify = load("gulp-notify");
const gutil = load("gulp-util");

core.buildTasks.push("build:server");

const buildTransform = transform => {
	gutil.log(gutil.colors.green(core.getName(transform) + ": building..."));

	let buildPath = core.out;

	let dest = path.join(buildPath, transform.dest);
	let sourcedir = path.parse(transform.source).dir;

	let entries = [transform.source];

	if (transform.extraEntries) {
		entries.push(...transform.extraEntries);
	}

	const handler = core.getErrorHandler(core.getName(transform));

	let stream = gulp.src(entries)
		.pipe(sourcemaps.init())
		.on("error", handler)
		.pipe(gulpTypescript(transform.config && transform.config.typescript));

	let js = stream.js
		.pipe(sourcemaps.write("./"))
		.pipe(gulp.dest(dest));

	let dts = stream.dts
		.pipe(gulp.dest(dest));

	stream = merge([js, dts])
		.pipe(core.getNotify(core.getName(transform) + ": done!"));

	return stream;
};

gulp.task("build:server", () => {
	let merged = merge();

	for (let transform of core.getTransforms("server")) {
		merged.add(buildTransform(transform));

		if (core.watch) {
			gulp.watch(transform.source, e => {
				buildTransform(transform);
			});
		}
	}

	return merged;
});