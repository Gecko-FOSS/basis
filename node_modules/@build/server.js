"use strict";

let core = require("./core");
let load = core.load;

let path = load("path");
let fs = load("fs");
let gulp = load("gulp");

let merge = load("merge-stream");

let insert = load("gulp-insert");
let gulpTypescript = load("gulp-typescript");
let sourcemaps = load("gulp-sourcemaps");
let notify = load("gulp-notify");
let gutil = load("gulp-util");

core.buildTasks.push("build:server");

let buildTransform = transform => {
	gutil.log(gutil.colors.green(core.getName(transform) + ": building..."));

	let buildPath = core.getBuildPath();

	let dest = path.join(buildPath, transform.dest);
	let sourcedir = path.parse(transform.source).dir;

	let entries = [transform.source];

	if (transform.extraEntries) {
		entries.push(...transform.extraEntries);
	}

	let stream = gulp.src(entries)
		.on("error", core.onError)
		.pipe(sourcemaps.init())
			.pipe(gulpTypescript(transform.config))
			.pipe(insert.prepend(`"use strict"; `))
		.pipe(sourcemaps.write("./"))
		.pipe(gulp.dest(dest))
		.pipe(notify({
			message: core.getName(transform) + ": done!",
			onLast: true
		}));

	return stream;
};

gulp.task("build:server", () => {
	let merged = merge();

	for (let transform of core.getTransforms("server")) {
		merged.add(buildTransform(transform));

		gulp.watch(transform.source, e => {
			buildTransform(transform);
		});
	}

	return merged;
});