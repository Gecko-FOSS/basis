"use strict";

const postcss = require("postcss");
const path = require("path");
const glob = require("glob");
const fs = require("fs");

const pscss = require("postcss-scss");
const reporter = require("postcss-reporter");

const formats = ["%", "_%.scss", "%.css", "%.json"];

const sassProc = postcss();

const loaders = [
	[/\.scss$/, (result, opts) => {
		return sassProc.process(result.contents, Object.assign({}, opts, { from: result.path, syntax: pscss }));
	}],
	[/\.css$/, (result, opts) => {
		return sassProc.process(result.contents, Object.assign({}, opts, { from: result.path }));
	}],
	[/\.json$/, (result, opts) => {
		throw "nope";
	}]
];

function resolveFile(partial) {
	let parsed = path.parse(partial);

	return formats.map(v => {
		return path.join(parsed.dir, v.replace("%", parsed.base));
	});
}

function resolveReadFile(partial) {
	const resolved = resolveFile(partial);

	let prom = Promise.resolve();

	for (let file of resolved) {
		prom = prom
			.catch(() => {
				return readFile(file);
			})
			.then(result => {
				if (result) {
					return result;
				} else {
					return readFile(file);
				}
			})
	}

	return prom;
}

function readFile(file) {
	return new Promise((resolve, reject) => {
		fs.readFile(file, (err, contents) => {
			if (err) {
				return reject(err);
			}

			resolve({
				contents: contents.toString("utf-8"),
				path: file
			});
		});
	});
}

function getLoader(path) {
	for (const loader of loaders) {
		if (loader[0].test(path)) {
			return loader[1];
		}
	}
}

function processGlob(file, from, opts) {
	const full = path.join(path.dirname(from), file);

	console.log("glob over", full);

	return new Promise((resolve, reject) => {
		glob(full, (err, matches) => {
			if (err) {
				return reject(err);
			}

			console.log("found", matches);

			let proms = matches.map(file => {
				return readFile(file)
					.then(result => {
						return getLoader(result.path)(result, opts);
					});
			});

			let res = Promise.all(proms)
				.then(results => results.map(r => r.root));

			resolve(res);
		});
	});
}

function processNormal(file, from, opts) {
	const full = path.join(path.dirname(from), file);

	return resolveReadFile(full)
		.catch(err => {
			console.log("Failed to open", err);
		})
		.then(result => {
			// console.log("FILE READ (" + file + ")");
			// console.log(contents);

			console.log(`read file ${ result.path }`);

			return getLoader(result.path)(result, opts);
		}).then(result => {
			return result.root;
		});
}

module.exports = postcss.plugin("postcss-nice-import", opts => {
	opts = opts || {};

	return (css, result) => {
		return new Promise((resolve, reject) => {
			console.log(css.source.input.file);

			const proms = [];

			for (let i = 0; i < css.nodes.length; i++) {
				const node = css.nodes[i];

				if (node.type === "atrule" && node.name === "import") {
					const target = node.params
						.replace(/^['"]/, "")
						.replace(/['"]$/, "");

					if (glob.hasMagic(target)) {
						const prom = processGlob(target, css.source.input.file, opts)
							.then((results) => {
								console.log("processed glob");

								if (results) {
									console.log("replaced node");
									node.replaceWith(...results);
								}
							});

						proms.push(prom);
					} else {
						console.log("got no magic");

						const prom = processNormal(target, css.source.input.file, opts)
							.then((result) => {
								console.log("processed normal");
								if (result) {
									console.log("replaced node");
									node.replaceWith(result);
								}
							});

						proms.push(prom);
					}

					console.log("import", target);
				}
			}

			resolve(Promise.all(proms));
		});
	};
});