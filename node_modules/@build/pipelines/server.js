"use strict";

const core = require("../core");
const loader = core.getLoader();
const $ = loader.store;

const gulp = require("gulp");
const merge = require("merge-stream");

loader.depend({
	path: "path",

	gulpTypescript: "gulp-typescript",
	sourcemaps: "gulp-sourcemaps",
	gutil: "gulp-util",
	concat: "gulp-concat",
	insert: "gulp-insert"
});

core.buildTasks.push("build:server");

const buildPipeline = pipeline => {
	$.gutil.log($.gutil.colors.green(core.getName(pipeline) + ": building..."));

	let buildPath = core.out;

	let dest = $.path.join(buildPath, pipeline.dest);
	let sourcedir = $.path.parse(pipeline.source).dir;

	let entries = [pipeline.source];

	if (pipeline.extraEntries) {
		entries.push(...pipeline.extraEntries);
	}

	let config = {
		declaration: false
	};

	if (pipeline.typingsDest) {
		config.declaration = true;
	}

	if (pipeline.config && pipeline.config.typescript) {
		Object.assign(config, pipeline.config.typescript);
	}

	const handler = core.getErrorHandler(core.getName(pipeline));

	let stream = gulp.src(entries)
		.pipe($.sourcemaps.init())
		.on("error", handler)
		.pipe($.gulpTypescript(config));

	const streams = [];

	let js = stream.js
		.pipe($.sourcemaps.write("./"))
		.pipe(gulp.dest(dest));

	streams.push(js);

	if (pipeline.typingsDest) {
		let typingsDest = $.path.join(buildPath, pipeline.typingsDest);
		let moduleName = pipeline.moduleName;

		let dts = stream.dts
			.pipe($.insert.transform((contents, file) => {
				const normalSource = $.path.normalize(sourcedir.replace(/\*/g, "")).replace(/\\/g, "\\\\");

				const matches = file.path.match(new RegExp(`^.+?${ normalSource }[/\\\\]?(.+)`));

				if (!matches) {
					return contents;
				}

				const modulePath = matches[1].replace(/\.d\.ts$/, "");

				contents = contents.replace(/from "(.+?)"/g, (whole, path) => {
					return `from "${ $.path.normalize($.path.join(moduleName, path)).replace(/\\/g, "/") }"`;
				});
				contents = contents.replace(/\n/g, "\n\t").trim();

				return `declare module "${ $.path.join(moduleName, modulePath).replace(/\\/g, "/") }" {\n\t${ contents }\n}`;
			}))
			.pipe($.concat("index.d.ts"))
			.pipe(gulp.dest(typingsDest));

		streams.push(dts);
	}

	stream = merge(streams)
		.pipe(core.getNotify(core.getName(pipeline) + ": done!"));

	return stream;
};

gulp.task("build:server", () => {
	const pipelines = core.getPipelines("server");
	let merged = merge();

	if (pipelines.length > 0) {
		loader.load();
	}

	for (let pipeline of pipelines) {
		merged.add(buildPipeline(pipeline));

		if (core.watch) {
			gulp.watch(pipeline.source, e => {
				buildPipeline(pipeline);
			});
		}
	}

	return merged;
});