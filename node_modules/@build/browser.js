"use strict";

const core = require("./core");
const load = core.load;

const path = load("path");
const gulp = load("gulp");

const merge = load("merge-stream");
const source = load("vinyl-source-stream");
const buffer = load("vinyl-buffer");

const rollup = load("gulp-rollup");
const gulpTypeScript = load("gulp-typescript");
const rollupTypeScript = load("rollup-plugin-typescript");

const gutil = load("gulp-util");
const notify = load("gulp-notify");
const gulpif = load("gulp-if");
const sourcemaps = load("gulp-sourcemaps");
const rename = load("gulp-rename");
const insert = load("gulp-insert");
const uglify = load("gulp-uglify");

core.buildTasks.push("build:browser");

const buildTransform = (transform) => {
	let buildPath = core.out;

	let dest = path.join(buildPath, transform.dest);
	let ppath = path.parse(dest);
	let outDir = ppath.dir;

	let entries = [transform.source];

	if (transform.extraEntries) {
		entries.push(...transform.extraEntries);
	}

	let stream = gulp.src(entries);

	if (core.sourcemaps) {
		stream = stream
			.pipe(sourcemaps.init());
	}

	stream = stream
		// .pipe(gulpTypeScript(transform.config))
		.pipe(rollup({
			sourceMap: true,
			plugins: [ rollupTypeScript() ]
		}))
		.pipe(insert.prepend(`"use strict"; `))
		.pipe(rename("bundle.js"))

	if (core.minify) {
		stream = stream
			.pipe(uglify());
	}

	if (core.sourcemaps) {
		stream = stream
			.pipe(sourcemaps.write("."));
	}

	stream = stream
		.pipe(gulp.dest(outDir))
		.pipe(core.browserSync.stream())
		.pipe(core.getNotify(core.getName(transform) + ": done!"));

	return stream;
};

gulp.task("build:browser", () => {
	let merged = merge();

	for (let transform of core.getTransforms("browser")) {
		merged.add(buildTransform(transform));
	}

	return merged;
});