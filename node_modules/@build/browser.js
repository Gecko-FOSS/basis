"use strict";

const core = require("./core");
const load = core.load;

const path = load("path");
const gulp = load("gulp");

const merge = load("merge-stream");
const source = load("vinyl-source-stream");
const buffer = load("vinyl-buffer");

const browserify = load("browserify");
const tsify = load("tsify");
const watchify = load("watchify");

const gutil = load("gulp-util");
const notify = load("gulp-notify");
const gulpif = load("gulp-if");
const sourcemaps = load("gulp-sourcemaps");
const rename = load("gulp-rename");
const uglify = load("gulp-uglify");

core.buildTasks.push("build:browser");

const buildTransform = (transform) => {
	let buildPath = core.out;

	let dest = path.join(buildPath, transform.dest);
	let ppath = path.parse(dest);
	let outDir = ppath.dir;

	let entries = [transform.source];

	if (transform.extraEntries) {
		entries.push(...transform.extraEntries);
	}

	let args = watchify.args;
	args.extensions = [".ts"];
	args.entries = entries;
	args.debug = true;

	if (transform.config && transform.config.rootDir) {
		args.paths = [transform.config.rootDir];
	}

	if (transform.config && transform.config.browserify) {
		Object.assign(args, transform.config.browserify);
	}

	let bundler = browserify(args);

	if (core.watch) {
		bundler = watchify(bundler);
	}

	bundler = bundler.plugin(tsify, transform.config && transform.config.typescript);

	let rebundle = () => {
		gutil.log(gutil.colors.green(core.getName(transform) + ": building..."));

		const handler = core.getErrorHandler(core.getName(transform));

		let stream = bundler.bundle()
			.on("error", handler)
			.pipe(source(transform.source))
			.pipe(buffer());

		if (core.sourcemaps) {
			stream = stream
				.pipe(sourcemaps.init({ loadMaps: true }))
		}

		if (core.minify) {
			stream = stream
				.pipe(uglify())
		}

		stream = stream
			.pipe(rename(ppath.base));

		if (core.sourcemaps) {
			stream = stream
				.pipe(sourcemaps.write("./"));
		}

		stream = stream
			.pipe(gulp.dest(outDir))
			.pipe(core.browserSync.stream())
			.pipe(core.getNotify(core.getName(transform) + ": done!"));

		return stream;
	}

	if (core.watch) {
		bundler.on("update", rebundle);
	}

	return rebundle();
};

gulp.task("build:browser", () => {
	let merged = merge();

	for (let transform of core.getTransforms("browser")) {
		merged.add(buildTransform(transform));
	}

	return merged;
});