"use strict";

let getValue = (name, base, core) => {
	let conf = core.conf;

	if (core.flags[name] != null) {
		return core.flags[name];
	}

	if (conf[name] != null) {
		return conf[name];
	}

	return base;
};

let conf;
try {
	conf = require("../../build.user.conf");
} catch(e) {
	conf = require("../../build.conf");
}

let core = {
	version: "2.0.0",

	modules: ["browser", "server", "styles", "static"],
	buildTasks: [],

	conf: conf,
	browserSync: null,
	flags: {
		once: null,
		production: null
	},

	get once() {
		return getValue("once", false, core);
	},

	get production() {
		return getValue("production", false, core);
	},

	get sourcemaps() {
		return getValue("sourcemaps", !core.production, core);
	},

	get minify() {
		return getValue("minify", !core.production, core);
	},

	load: (path) => {
		try {
			return require(path);
		} catch(e) {
			console.log(`Couldn't load module "${path}", try running "npm install"`);
			process.exit();
		}
	},

	getBuildPath: () => core.production ? core.conf.releasePath : core.conf.debugPath,

	getName: (transform) => {
		if (transform.name) {
			return transform.name;
		}

		return transform.type.charAt(0).toUpperCase() + transform.type.slice(1);
	},

	getTransforms: (type) => {
		return core.conf.transforms.filter(transform => {
			if (type != null && transform.type !== type) {
				return false;
			}

			if (transform.disabled) {
				return false;
			}

			return true;
		});
	},

	onError: function(err) {
		require("gulp-notify").onError("Error: <%= error.message %>")(err);

		this.emit("end");
	}
};

module.exports = core;