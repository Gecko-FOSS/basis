"use strict";

const core = require("./core");
const load = core.load;

const path = load("path");
const gulp = load("gulp");

const merge = load("merge-stream");

const sass = load("gulp-sass");

const postcss = load("gulp-postcss");
const syntaxSCSS = load("postcss-scss");
const sassyImport = load("postcss-sassy-import");

const autoprefixer = load("autoprefixer");
const cssnano = load("cssnano");
const stylelint = load("stylelint");
const reporter = load("postcss-reporter");

const rename = load("gulp-rename");
const sourcemaps = load("gulp-sourcemaps");
const notify = load("gulp-notify");
const gutil = load("gulp-util");

core.buildTasks.push("build:styles");

const buildTransform = (transform) => {
	gutil.log(gutil.colors.green(core.getName(transform) + ": building..."));

	let buildPath = core.out;

	let dest = path.join(buildPath, transform.dest);
	let ppath = path.parse(dest);

	let sassConf = {};
	Object.assign(sassConf, transform.config.sass);

	let processors = [sassyImport({ sourcemap: true })];

	if (transform.config.stylelint) {
		processors.push(stylelint(transform.config.stylelint));
	}

	if (transform.config.autoprefixer) {
		processors.push(autoprefixer(transform.config.autoprefixer));
	}

	if (core.minify) {
		processors.push(cssnano({ autoprefixer: false }));
	}

	processors.push(reporter({
		clearMessages: true,
		// throwError: true
	}));

	const handler = core.getErrorHandler(core.getName(transform));

	let stream = gulp.src(transform.source)
		.pipe(sourcemaps.init())
			.on("error", handler)
		.pipe(postcss(processors, { syntax: syntaxSCSS, sourcemap: true }))
			.on("error", handler)
		.pipe(sass(sassConf).on("error", sass.logError))
			.on("error", handler)
		.pipe(rename(ppath.base));

	if (core.sourcemaps) {
		stream = stream
			.pipe(sourcemaps.write("./"));
	}

	stream = stream
		.pipe(gulp.dest(ppath.dir))
		.pipe(core.browserSync.stream())
		.pipe(core.getNotify(core.getName(transform) + ": done!"));

	return stream;
};

gulp.task("build:styles", () => {
	let merged = merge();

	for (let transform of core.getTransforms("styles")) {
		merged.add(buildTransform(transform));

		let sourcedir = path.parse(transform.source).dir;

		if (core.watch) {
			gulp.watch(sourcedir + "/**/*.scss", e => {
				return buildTransform(transform);
			});

			gulp.watch(sourcedir + "/**/*.json", e => {
				return buildTransform(transform);
			});
		}
	}

	return merged;
});