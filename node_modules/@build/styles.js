"use strict";

let core = require("./core");
let load = core.load;

let path = load("path");
let fs = load("fs");
let gulp = load("gulp");

let merge = load("merge-stream");

let sass = load("gulp-sass");
let sassGlob = load("./sass-glob-once");
let rename = load("gulp-rename");
let autoprefixer = load("gulp-autoprefixer");
let nano = load("gulp-cssnano");
let sourcemaps = load("gulp-sourcemaps");
let notify = load("gulp-notify");
let gutil = load("gulp-util");

core.buildTasks.push("build:styles");

let buildTransform = (transform) => {
	gutil.log(gutil.colors.green(core.getName(transform) + ": building..."));

	let buildPath = core.out;

	let dest = path.join(buildPath, transform.dest);
	let ppath = path.parse(dest);

	let sassConf = {
		importer: [sassGlob]
	};
	Object.assign(sassConf, transform.config.sass);

	let stream = gulp.src(transform.source)
		.on("error", core.onError)
		.pipe(sass(sassConf).on("error", sass.logError))
		.pipe(rename(ppath.base))
		.pipe(autoprefixer(transform.config.autoprefixer));

	if (core.minify) {
		stream = stream
			.pipe(nano());
	}

	if (core.sourcemaps) {
		stream = stream
			.pipe(sourcemaps.write("./"));
	}

	stream = stream
		.pipe(gulp.dest(ppath.dir))
		.pipe(core.browserSync.stream())
		.pipe(core.getNotify(core.getName(transform) + ": done!"));

	return stream;
};

gulp.task("build:styles", () => {
	let merged = merge();

	for (let transform of core.getTransforms("styles")) {
		merged.add(buildTransform(transform));

		let sourcedir = path.parse(transform.source).dir;

		if (core.watch) {
			gulp.watch(sourcedir + "/**/*.scss", e => {
				buildTransform(transform);
			});
		}
	}

	return merged;
});